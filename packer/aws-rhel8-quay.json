{
  "variables": {
    "aws_access_key": "{{env `AWS_ACCESS_KEY_ID`}}",
    "aws_secret_key": "{{env `AWS_SECRET_ACCESS_KEY`}}",
    "username": "{{env `USERNAME`}}",
    "region": "{{env `AWS_DEFAULT_REGION`}}",
    "ami_description": "Quay Registry for OCP4",    
    "purpose": "Quay Registry for OCP4",
    "os": "RHEL",
    "os_version": "8",
    "release": "8.6",
    "vpc_id": "{{env `DEAFULT_VPC_ID`}}",
    "subnet_id": "{{env `SUBNET_ID`}}",
    "source_ami": "{{env `SOURCE_AMI`}}",
    "pull_secret": "{{env `PULL_SECRET`}}",
    "ocp_ver": "{{env `OCP_VER`}}"
  },
  "builders": [{
    "access_key": "{{user `aws_access_key`}}",
    "secret_key": "{{user `aws_secret_key`}}",
    "ami_name": "Quay Regisry for OCP4 {{isotime \"2006-01-02-150405\"}}",
    "ami_description": "Quay Registry for OCP4 {{isotime \"2006-01-02-150405\"}}",
    "instance_type": "m5.xlarge",
    "source_ami": "{{user `source_ami`}}",
    "type": "amazon-ebs",
    "region": "{{user `region`}}",
    "vpc_id": "{{ user `vpc_id` }}",
    "subnet_id": "{{ user `subnet_id` }}",
    "associate_public_ip_address": true,
    "ami_virtualization_type": "hvm",
    "security_group_id": "sg-0af90ca334eb6b449",
    "ami_block_device_mappings": [
      {
        "device_name": "/dev/sda1",
        "volume_size": 300,
        "encrypted": false,
        "volume_type": "gp2",
        "delete_on_termination": false
      }
    ],
    "launch_block_device_mappings": [
      {
        "device_name": "/dev/sda1",
        "volume_size": 300,
        "encrypted": false,
        "volume_type": "gp2",
        "delete_on_termination": true
      }
    ],
    "ebs_optimized": true,
    "ena_support": true,
    "force_delete_snapshot": true,
    "encrypt_boot": false,
    "run_tags": {
      "Creator": "{{user `username`}}",
      "OS": "{{user `os`}}",
      "OS_Version": "{{user `os_version`}}",
      "Release": "{{user `release`}}",
      "Base_AMI_Name": "{{ .SourceAMIName }}",
      "Purpose": "{{user `purpose`}}",
      "Builder": "Packer {{packer_version}}"
    },
    "run_volume_tags": {
      "Creator": "{{user `username`}}",
      "OS": "{{user `os`}}",
      "OS_Version": "{{user `os_version`}}",
      "Release": "{{user `release`}}",
      "Base_AMI_Name": "{{ .SourceAMIName }}",
      "Purpose": "{{user `purpose`}}",
      "Builder": "Packer {{packer_version}}"
    },
    "tags": {
      "Creator": "{{user `username`}}",
      "OS": "{{user `os`}}",
      "OS_Version": "{{user `os_version`}}",
      "Release": "{{user `release`}}",
      "Base_AMI_Name": "{{ .SourceAMIName }}",
      "Purpose": "{{user `purpose`}}",
      "Builder": "Packer {{packer_version}}"
    },
    "snapshot_tags": {
      "Creator": "{{user `username`}}",
      "OS": "{{user `os`}}",
      "OS_Version": "{{user `os_version`}}",
      "Release": "{{user `release`}}",
      "Base_AMI_Name": "{{ .SourceAMIName }}",
      "Purpose": "{{user `purpose`}}",
      "Builder": "Packer {{packer_version}}"
    },
    "ssh_username": "ec2-user",
    "ssh_pty": "true"
  }],
  "provisioners": [
    {
      "type": "file",
      "source": "{{user `pull_secret`}}",
      "destination": "/tmp/pull-secret.txt"
    },
    {
      "type": "file",
      "source": "imageset-config.yaml",
      "destination": "/tmp/imageset-config.yaml"
    },
    {
      "type": "file",
      "source": "playbooks",
      "destination": "/tmp"
    },
    {
      "type": "file",
      "source": "quayinit.service",
      "destination": "/tmp/quayinit.service"
    },
    {   
      "type": "shell",
      "execute_command": "sudo -n sh '{{.Path}}'",
      "inline": [
        "echo '*** Installing Base Dependencies...'",
        "set -ex",
        "dnf -y install ansible-core python38"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo '*** Installing User Space Dependencies...'",
        "set -ex",
        "ansible-galaxy role install redhatofficial.rhel8_stig",
        "pip3 install --user wheel jinja2 awscli boto3",
        "ansible-galaxy collection install amazon.aws community.aws community.crypto containers.podman community.general ansible.posix"
      ]
    },
    {
      "type": "ansible-local",
      "playbook_file": "./bootstrap.yaml",
      "extra_arguments": [
        "--extra-vars",
        "\"ocp_ver={{ user `ocp_ver`}}\""
      ]
    },
    {
      "type": "shell",
      "execute_command": "sudo -n sh '{{.Path}}'",
      "inline": [
        "echo '*** Installing Mirror Registry...'",
        "set -ex",
        "mv /tmp/quayinit.service /etc/systemd/system/quayinit.service",
        "chmod 0644 /etc/systemd/system/quayinit.service",
        "restorecon -v /etc/systemd/system/quayinit.service",
        "systemctl daemon-reload",
        "systemctl enable quayinit.service",
        "ansible-galaxy role install redhatofficial.rhel8_stig",
        "/usr/local/bin/mirror-registry install --verbose --quayRoot /opt/quay/ | tee /var/log/mirror-registry.log",
        "ansible-galaxy collection install community.general ansible.posix",
        "ansible-playbook /tmp/playbooks/harden_quay.yaml",
        "chmod 0644 /var/log/mirror-registry.log"
      ]
    },
    {
      "type": "shell",
      "execute_command": "/bin/sh -c {{ .Path }} {{ .Vars }}",
      "inline": [
        "echo '*** Mirroring Content...'",
        "set -ex",
        "mkdir -p ${XDG_RUNTIME_DIR}/containers || true",
        "cat /tmp/pull-secret.txt > ${XDG_RUNTIME_DIR}/containers/auth.json",
        "export REG_USER=$(grep -o '(.*, .*)' /var/log/mirror-registry.log | sed 's|[(),]||g' | awk '{print $1}')",
        "export REG_PASS=$(grep -o '(.*, .*)' /var/log/mirror-registry.log | sed 's|[(),]||g' | awk '{print $2}')",
        "podman login -u=${REG_USER} -p=${REG_PASS} --tls-verify=false ${HOSTNAME}:8443",
        "/usr/local/bin/oc-mirror --config /tmp/imageset-config.yaml --dest-skip-tls --continue-on-error docker://${HOSTNAME}:8443"
      ]
    },
    {
      "type": "shell",
      "execute_command": "sudo -n sh '{{.Path}}'",
      "inline": [
        "echo '** Shreding sensitive data ...'",
        "set -ex",
        "shred -u /etc/ssh/*_key /etc/ssh/*_key.pub",
        "shred -u /root/.*history /home/*/.*history",
        "shred -u /root/.ssh/authorized_keys /home/*/.ssh/authorized_keys",
        "shred -u /tmp/pull-secret.txt",
        "shred -u /var/run/user/1000/containers/auth.json",
        "sync; sleep 1; sync"
      ]
    }
  ]
}

