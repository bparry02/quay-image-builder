---
- hosts: localhost
  become: false
  gather_facts: true
  connection: local
  vars:
    dev_uri: "https://developers.redhat.com/content-gateway/file/pub/openshift-v4/clients"
    mirror_uri: "https://mirror.openshift.com/pub/openshift-v4/x86_64/clients"
    ocp_maj_ver: "4.11"   # Overridden in the packer build
    ocp_min_ver: "4.11.8" # Overridden in the packer build
    ocp_max_ver: "4.11.8" # Overridden in the packer build
    quay_root: /opt/quay
    reg_user: "init"
    reg_pass: "openshift"

  tasks:

    - name: Clean dnf cache
      become: true
      shell: dnf clean all
    
    # TODO: Commented out for testing
    - name: Update all packages
      become: true
      ansible.builtin.dnf:
        name: "*"
        state: latest
    
#    - name: Update pip
#      become: true
#      ansible.builtin.pip:
#        name: pip
#        state: latest
#        executable: pip3

    - name: Install required packages
      become: true
      ansible.builtin.dnf:
        name:
          - podman
          - firewalld
          - git
          - vim
          - jq
    
    - name: Enable firewalld service
      become: true
      ansible.builtin.systemd:
        name: firewalld
        state: started
        enabled: true

    - name: Configure firewall ports
      become: true
      ansible.posix.firewalld:
        port: "8443/tcp"
        permanent: true
        immediate: true
        state: enabled
        zone: "public"
    
    - name: Pull OCP Dependencies
      become: true
      ansible.builtin.unarchive:
        src: "{{ item }}"
        dest: /usr/local/bin
        remote_src: true
      loop:
        - "{{ dev_uri }}/mirror-registry/1.2.6/mirror-registry.tar.gz"
        - "{{ mirror_uri }}/ocp/{{ ocp_max_ver }}/openshift-install-linux-{{ ocp_max_ver }}.tar.gz"
        - "{{ mirror_uri }}/ocp/{{ ocp_max_ver }}/openshift-client-linux-{{ ocp_max_ver }}.tar.gz"
        - "{{ mirror_uri }}/ocp/latest-4.11/oc-mirror.tar.gz"
        - "{{ mirror_uri }}/pipeline/latest/tkn-linux-amd64.tar.gz"
    
      # Separate task because this doesn't come as an archive
    - name: Download odo
      become: true
      ansible.builtin.get_url:
        url: "{{ item }}"
        dest: /usr/local/bin/odo
        mode: '0755'
      loop:
        - "{{ dev_uri }}/odo/v2.5.1/odo-linux-amd64"
    
    - name: Change file ownership, group and permissions
      become: true
      ansible.builtin.file:
        path: "/usr/local/bin/{{ item }}"
        owner: root
        group: root
        mode: 0755
        state: file
      loop:
        - openshift-install
        - oc
        - kubectl
        - oc-mirror
        - tkn
        - tkn-pac
        - odo
        - mirror-registry
    
    - name: Restore SELinux context
      become: true
      ansible.builtin.command: restorecon -v /usr/local/bin/{{ item }}
      loop:
        - openshift-install
        - oc
        - kubectl
        - oc-mirror
        - tkn
        - tkn-pac
        - odo
        - mirror-registry
    
    - name: Create quay directory
      become: true
      file:
        path: "{{ quay_root }}"
        state: directory
    
#    - name: Remove existing quay certs from system trust store
#      become: true
#      file:
#        path: /etc/pki/ca-trust/source/anchors/quay.cert
#        state: absent
#    
#    - name: Copy quay cert to system trust store
#      become: true
#      copy:
#        src: /opt/quay/quay-config/ssl.cert
#        dest: /etc/pki/ca-trust/source/anchors/quay.cert
#        remote_src: true
#        owner: root
#        group: root
#        mode: 0644
#    
#    - name: Update system trust store
#      become: true
#      ansible.builtin.command: update-ca-trust
#    
#    - name: Extract system trust store
#      become: true
#      ansible.builtin.command: update-ca-trust extract
#    
#    - name: Cleanup files
#      become: true
#      file:
#        path: "{{ item }}"
#        state: absent
#      loop:
#        - README.md
#        - LICENSE
#        - execution-environment.tar
#        - image-archive.tar
#        - pause.tar
#        - postgres.tar
#        - quay.tar
#        - redis.tar

    - name: Create directory for git clone
      file:
        path: "{{ ansible_env.HOME }}/openshift4-c2s"
        state: directory

    - name: Read-write git checkout from github
      ansible.builtin.git:
        repo: https://github.com/RedHatGov/openshift4-c2s.git
        dest: "{{ ansible_env.HOME }}/openshift4-c2s"
    
#    - name: Install pip modules
#      ansible.builtin.pip:
#        name:
#          - "wheel"
#          - "jinja2"
#          - "awscli"
#          - "boto3"
#        executable: pip3
#        extra_args: "--user"
    
    - name: Create containers directory
      file:
        path: "{{ ansible_env.XDG_RUNTIME_DIR }}/containers"
        state: directory
    
    - name: Copy pull secret
      copy:
        src: "/tmp/pull-secret.txt"
        dest: "{{ ansible_env.XDG_RUNTIME_DIR }}/containers/auth.json"
        remote_src: true
    
    - name: Get Registry Username
      shell: |
        grep -o '(.*, .*)' /var/log/mirror-registry.log | sed 's|[(),]||g' | awk '{print $1}'
      register: reg_user_info
    
    - name: Get Registry Password
      shell: |
        grep -o '(.*, .*)' /var/log/mirror-registry.log | sed 's|[(),]||g' | awk '{print $1}'
      register: reg_pass_info
    
    - name: Set registry username and password facts
      set_fact:
        reg_user: "{{ reg_user_info.stdout }}"
        reg_pass: "{{ reg_pass_info.stdout }}"
    
      # The ansible_env.HOSTNAME doesn't get set for some reason
    - name: Get hostname
      ansible.builtin.command: hostname
      register: hostname_info

    - name: Set hostname fact
      set_fact:
        my_hostname: "{{ hostname_info.stdout }}"

    - name: Show hostname var
      debug:
        var: my_hostname

    - name: Replace localhost with actual hostname
      ansible.builtin.replace:
        path: /home/ec2-user/imageset-config.yaml
        regexp: localhost
        replace: "{{ my_hostname }}"

    - name: Replace OCP_MAJ_VER with actual version number
      ansible.builtin.replace:
        path: /home/ec2-user/imageset-config.yaml
        regexp: OCP_MAJ_VER
        replace: "{{ ocp_maj_ver }}"

    - name: Replace OCP_MIN_VER with actual version number
      ansible.builtin.replace:
        path: /home/ec2-user/imageset-config.yaml
        regexp: OCP_MIN_VER
        replace: "{{ ocp_min_ver }}"

    - name: Replace OCP_MAX_VER with actual version number
      ansible.builtin.replace:
        path: /home/ec2-user/imageset-config.yaml
        regexp: OCP_MAX_VER
        replace: "{{ ocp_max_ver }}"
